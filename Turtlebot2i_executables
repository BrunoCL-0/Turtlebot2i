                                *Executaveis aplicaveis ao turtlebot e explicação deles*

//ros2 run teleop_twist_keyboard teleop_twist_keyboard --ros-args --remap cmd_vel:=commands/velocity
*Conecta o turtlebot ao teclado onde pode realizar suas movimentações como:
.Andar pra frente(i)
.Girar pra direita(j)
.Girar pra esquerda(l)
.Arco pra direita(o)
.Arco pra esquerda(u)
.Andar pra tras(,)
.Arco pra tras esquerda(m)
.Arco pra tras direita(.)

// ros2 launch teleop_twist_joy teleop-launch.py config_filepath:='/home/brunocunhalima/pdp.config.yaml' joy_vel:='commands/velocity'
*Conecta o joystick no turtlebot para movimenta-lo. Obs: Deve conectar pelo terminal do qual o computador esteja conectado ao controle // Obs2: o pdp.config.yaml foi salvo no local sinalizado 
"/home/brunocunhalima/", podendeo assim variar a situação, na nuc foi : ros2 launch teleop_twist_joy teleop-launch.py config_filepath:="/home/turtlebot/ros2_ws/src/kobuki_test/kobuki_controller/pdp.config.yaml" joy_vel:="/commands/velocity"


.Codigo dentro do .yaml:

teleop_twist_joy_node:
  ros__parameters:
    axis_linear:  # Left thumb stick vertical
      x: 1
    scale_linear:
      x: 0.2
    scale_linear_turbo:
      x: 1.5

    axis_angular:  # Left thumb stick horizontal
      yaw: 0
    scale_angular:
      yaw: 0.4

    enable_button: 4  # Left 'LB' button
    enable_turbo_button: 5  # Right 'RB' button

.Aperta LB e move o robo

// ros2 launch cmd_vel_mux cmd_vel_mux-launch.py 
*Pelo oq entendi o codigo define prioridades de conexão, ou seja, o codigo eh mum conjunto de ifs e elses nos quais por exemplo ao conectar um joystick ele vai definir ele como prioridade de saida,
ou, um teclado e assim por diante, podendo veriar a prioridade em tempo real

// ros2 launch kobuki_auto_docking compact.launch.py 
* Basicamente o codigo fica procurando a base do robo para carregar sua bateria, porem , ao executar em um terminal esse codigo algumas considerações devem ser consideradas;
obs1: dentro do yaml do pacote do kobuki_auto_docking foi alterado sinalizando a porta em device_port para "/dev/ttyUSB0" antes tava "/dev/kobuki"
obs2: ao executar <ros2 launch kobuki_auto_docking compact.launch.py> o codigo tambem ligara o robo, então não deve estar aberto em outro terminal o codigo que liga o robo 
(<ros2 launch kobuki_node kobuki_node-launch.py>)
obs3: deve-se mandar um action para o robo enquanto o launch estiver rodando(por outro terminal)
ex: ros2 action send_goal /auto_docking_action kobuki_ros_interfaces/action/AutoDocking '{}' - dessa forma, o robo ficara em circulos enquanto procura a base de carregamento 

// ros2 launch kobuki_bumper2pc kobuki_bumper2pc-launch.py (opção que falhou)
AVISO: tentei rodar esse codigo e da erro, fiz algumas mudanças pelo meu pc pra tentar resolver:
.Mudança 1 : adicionei no cmake do kobuki_bumper e no kobuki_ros a linha :

install(
  DIRECTORY config/
  DESTINATION share/${PROJECT_NAME}/config
)

.Mudança 2 : no launch do kobuki_bumper fiz as mudanças:
share_dir = ament_index_python.packages.get_package_share_directory('kobuki_ros')
e
params_file = os.path.join(share_dir, 'kobuki_bumper2pc', 'config', 'kobuki_bumper2pc_params.yaml')

obs: mesmo assim nao resolveu e vi q ia ter q mudar muito mais coisas e resolvi aguardar pra falar com orientador

// ros2 run kobuki_bumper2pc kobuki_bumper2pc_node (opção que funcionou)
*Converte eventos de sensores do robô Kobuki (bumpers(colisão) e sensores de cliff(tombo)) em uma nuvem de pontos (PointCloud2) e publica no tópico </pointcloud> , assim, ele não mede diretamente
a distância de objetos (como um LiDAR faria), mas sim avisa quando o robô já encostou em algo ou está perto de cair. Esse aviso pode interromper a movimentação do robô quando ele encostar em algo(exemplo).
obs1: <ros2 topic echo /sensors/core> da pra ver os bumpers e cliffs sendo alterados com o impacto ao robo 

// pasta kobuki_controller_tutorial
* Esse codigo aparentemente eh um inicializador de classe que funciona teoricamente para funcionalidade de bump/blink (colisão/piscar), então ele provavelmente foi chamado em outro codigo e funciona
de forma que o robo ao encostar em algo deve piscar um led
obs1: nao tem executavel, tentei rodar a pasta direto com ros2 run e o kobuki_controller_tutorial nem eh executavel
obs2: seu launch esta em .launch mas n eh um .py

//ros2 launch  kobuki_description robot_description.launch.py 
*publica TF + /robot_description e gera estados de juntas, dessa forma usando ros2 run rviz2 rviz2 -d ~/ros2_ws/src/kobuki_ros/kobuki_description/rviz/model.rviz o robo aparecera no rviz
obs1: a pasta kobuki_description possui alem do modelo .rviz imagens do robo e alguns urdfs( que define por exemplo as dimensões do robo)


// ros2 run kobuki_keyop kobuki_keyop_node
*Basicamente ele:
.Dabilita e desabilita os motores(e/d)
.Aumenta e diminui as velocidades linear/angular(setas do teclado)
.Reset nas velocidades(spacebar)
obs1: não possui launch
obs2: caso queira, execute <ros2 topic echo /cmd_vel> pra vizualizar as variações em tempo real 


// pasta kobuki_node/kobuki_ros.cpp (não consegui executar)
*Em teoria esse codigo vai: Criar a interface entre o robô e o ROS 2, permitindo que outros nós controlem e recebam informações do robô.
.Lê sensores e envia os dados para o ROS.
.Recebe comandos de movimento (cmd_vel) e envia para os motores.
.Publica mensagens de odometria e estado da bateria.
.Gerencia eventos do robô, como alertas de colisão ou bateria fraca.

// pasta kobuki_node/odometry.cpp (não consegui executar)
*Em teoria esse codigo vai: 
Este código é responsável por calcular e publicar a odometria do robô, ou seja, sua posição e orientação ao longo do tempo, utilizando dados de movimento e sensores.
Ele pode ser usado para rastrear a posição do robô em um ambiente e fornecer essas informações para outras partes do sistema (por exemplo, para navegação ou controle).

// pasta kobuki_node/diagnostics.cpp (não consegui executar)
*Em teoria esse codigo vai: gerar um diagnóstico detalhado com mensagens sobre o estado de vários sensores e sistemas.
.Bateria: Nível de carga e estado de carregamento.
.Sensores de obstáculos: Detecta colisões e quedas.
.Motores: Verifica consumo de corrente e se estão ativados/desativados.
.Sensores de entrada digital e analógica: Lê valores e os reporta.

//ros2 launch kobuki_node kobuki_node-composed-launch.py e //ros2 launch kobuki_node kobuki_node-launch.py (consegue executar)
*Basicamente ele vai rodar os 3 codigos citados anteriormente, onde:
.diagnostics.cpp (diagnóstico do robô)
.kobuki_ros.cpp (gerenciamento e comunicação ROS)
.odometry.cpp (cálculo de odometria)
obs1: no composed roda os nós ao mesmo tempo, no outro cada nó roda em um processo diferente
obs2: o codigo ao rodar exibiu o relatorio porem somente em partes pois algumas informações n foram exibidas porconta de um problema na comunicação serial
obs3: coloquei pra andar o robo em outro terminal e o erro da obs2 apareceu
obs4: o topic /cmd_vel n ta aparecendo ao rodar o codigo, talvez pelo erro serial 

//ros2 run kobuki_random_walker kobuki_random_walker_node --ros-args -p angular_velocity:=0.5
*O robo realiza movimento em linha reta, se encostar em algo gira e anda reto novamente, dependendo da situação liga LEDs especificos 
.Robô andando normalmente	LED1 (verde) aceso
.Robô levantado (Lift Sensor)	LED1 (vermelho) e LED2 (vermelho) acesos
.Robô perto de uma borda (Cliff Sensor)	LED1 (vermelho) e LED2 (amarelo) acesos
.Robô colidiu com um obstáculo (Bumper Sensor)	LED1 (laranja) aceso
obs1: não consegui rodar os launchs e eles estão em .launch sem .py


//ros2 launch kobuki_safety_controller safety_controller-launch.py 
*Em teoria o robo vai identificar quando bater em algo e andar pra traz dependendo do sensor ativado(nesse caso o da frente), porem ele apenas anda reto
obs1: mudei o launch na parte que tem escrita node_executable deixei apenas node (codigo antes n tava rodando e passou a rodar) - dentro da nuc do kobuki
obs2: execute junto : <ros2 topic pub /commands/velocity geometry_msgs/msg/Twist "{linear: {x: 0.2}, angular: {z: 0.0}}" --rate 10> pois assim ele vai movimentar o robo

// pasta kobuki_testsuite
* essa pasta ta em ros1 e tem 2 folders dentro dela(scripts e src), ambos possuem diversos codigos em .py em ros1 q executam varias funções diferentes
obs1: n consegui executar porconta de estar em ros1 e teria q mudar muita coisa na nuc
obs2: tem codigos interessantes q podem ser usados pra fazer algo especifico 
obs3: esses codigos importam outros codigos, geralmente oq esta no src eh importado pelo scripts pra executar algo


                        *MEXENDO NO TURTLEBOT2I*
Criei uma pasta na nuc chamada kobuki_test e nela tem novas pastas:

----- kobuki_button_test -  <ros2 run kobuki_button_test button_control_node>
*A intenção desse executavel ta sendo ao clicar no botão do robo ele realizar determinada função, nesse codigo criei com publishers e subscribers a logica na qual ao clicar:
.B0 - gira pra esquerda
.B2 - gira pra direita
.B1 - para o robó

------ kobuki_baterry_test - <ros2 run kobuki_battery_test kobuki_battery_test> 
*Basicamente ao executar esse codigo, o robo vai identificar o nivel da bateria, se estiver abaixo ou igual a 20%(1 traço) ele vai começar a piscar os dois leds vermelhos e apos um tempo ira começar
a emitir um som , realizando esses dois publishers ate apertar cntrl C e parar
obs1: Caso a bateria esteja carregada, vai printar uma mensagem de que tem bateria suficiente no turtlebot2i

------ kobuki_controller - <ros2 launch kobuki_controller kobuki_control_launch.py> 
*Esse comando executa varios codigos juntos:
.O que conecta o robo a base kobuki
.Da bateria
.Do joystick
.O node_manager.cpp , esse codigo basicamente esta dentro do kobuki_controller em seu src, nesse codigo ele:
 - Ao apertar B0 conecta o controle joystick no robo
 - Ao apertar B1 realiza um movimento especifico pra demonstração que esta dentro desse cpp 
 - Quando apertar B0 ou B1 pela segunda vez ou vai parar de executar o movimento ou executar a outra função imediatamente, depende da situação em progresso
obs1: esse cpp pode ser executado com run tbm , isolado, porem tem que rodar o kobuki_node em outro terminal também

------ sturtup aplication
* Aqui eh a forma utilizada pra no momento que o botão de ligar do robo for acionado ele chamar o launch kobuki_controller
.Etapa 1: Dentro do startup aplication do seu pc, clicar em add e nele por um nome e em command por o encaminhamento ao .sh
- Dentro do .sh:

#!/bin/bash
source /opt/ros/humble/setup.bash
source /home/turtlebot/ros2_ws/install/setup.bash
ros2 launch kobuki_controller kobuki_control_launch.py

.Etapa 2: Criar um service - sudo nano /etc/systemd/system/start_kobuki.service
- Dentro do .service:
[Unit]
Description=Start Kobuki on boot
After=network.target

[Service]
Type=simple
User=turtlebot
ExecStart=/bin/bash /home/turtlebot/start_kobuki.sh
Restart=always
Environment="DISPLAY=:0"
Environment="XDG_RUNTIME_DIR=/run/user/1000"

[Install]
WantedBy=multi-user.target

obs1: execute para funcionar: 
sudo systemctl daemon-reload
sudo systemctl enable start_kobuki.service
sudo nano /etc/systemd/system/start_kobuki.service
sudo nano /etc/systemd/system/start_kobuki.service
chmod +x /home/turtlebot/start_kobuki.sh

--- ros2_astra_camera
*Seguindo o passo a passo do - https://github.com/orbbec/ros2_astra_camera - lembrando de dar git clone após criar o ros2 workspace 
Obs1: ros2 launch astra_camera astra.launch.xml - eh o launch da camera 
obs2: utilizando rviz2 em outro terminal tem acesso aos topics e etc da camera 


Coisas a fazer/duvidas
.Por a camera?
.Movimento especifico?
.Adicionar o pacote de controle de velocidade do robo?  
.Aumentar o som de aviso da bateria?



LEMBRA DE TIRAR DA TOMADA O CARREGADOR
LEMBRAR DE UM MOMENTO TIRAR MINHAS INFORMAÇÕES DA NUC!

