                                *Executaveis aplicaveis ao turtlebot e explicação deles*

//ros2 run teleop_twist_keyboard teleop_twist_keyboard --ros-args --remap cmd_vel:=commands/velocity
*Conecta o turtlebot ao teclado onde pode realizar suas movimentações como:
.Andar pra frente(i)
.Girar pra direita(j)
.Girar pra esquerda(l)
.Arco pra direita(o)
.Arco pra esquerda(u)
.Andar pra tras(,)
.Arco pra tras esquerda(m)
.Arco pra tras direita(.)

// ros2 launch teleop_twist_joy teleop-launch.py config_filepath:='/home/brunocunhalima/pdp.config.yaml' joy_vel:='commands/velocity'
*Conecta o joystick no turtlebot para movimenta-lo. Obs: Deve conectar pelo terminal do qual o computador esteja conectado ao controle // Obs2: o pdp.config.yaml foi salvo no locao sinalizado "/home/brunocunhalima/", podendeo assim variar a situação
.Codigo dentro do .yaml:

teleop_twist_joy_node:
  ros__parameters:
    axis_linear:  # Left thumb stick vertical
      x: 1
    scale_linear:
      x: 0.2
    scale_linear_turbo:
      x: 1.5

    axis_angular:  # Left thumb stick horizontal
      yaw: 0
    scale_angular:
      yaw: 0.4

    enable_button: 4  # Left 'LB' button
    enable_turbo_button: 5  # Right 'RB' button

.Aperta LB e move o robo

// ros2 launch cmd_vel_mux cmd_vel_mux-launch.py 
*Pelo oq entendi o codigo define prioridades de conexão, ou seja, o codigo eh mum conjunto de ifs e elses nos quais por exemplo ao conectar um joystick ele vai definir ele como prioridade de saida,
ou, um teclado e assim por diante, podendo veriar a prioridade em tempo real

// ros2 launch kobuki_auto_docking compact.launch.py 
* Basicamente o codigo fica procurando a base do robo para carregar sua bateria, porem , ao executar em um terminal esse codigo algumas considerações devem ser consideradas;
obs1: dentro do yaml do pacote do kobuki_auto_docking foi alterado sinalizando a porta em device_port para "/dev/ttyUSB0" antes tava "/dev/kobuki"
obs2: ao executar <ros2 launch kobuki_auto_docking compact.launch.py> o codigo tambem ligara o robo, então não deve estar aberto em outro terminal o codigo que liga o robo 
(<ros2 launch kobuki_node kobuki_node-launch.py>)
obs3: deve-se mandar um action para o robo enquanto o launch estiver rodando(por outro terminal)
ex: ros2 action send_goal /auto_docking_action kobuki_ros_interfaces/action/AutoDocking '{}' - dessa forma, o robo ficara em circulos enquanto procura a base de carregamento 

// ros2 launch kobuki_bumper2pc kobuki_bumper2pc-launch.py (opção que falhou)
AVISO: tentei rodar esse codigo e da erro, fiz algumas mudanças pelo meu pc pra tentar resolver:
.Mudança 1 : adicionei no cmake do kobuki_bumper e no kobuki_ros a linha :

install(
  DIRECTORY config/
  DESTINATION share/${PROJECT_NAME}/config
)

.Mudança 2 : no launch do kobuki_bumper fiz as mudanças:
share_dir = ament_index_python.packages.get_package_share_directory('kobuki_ros')
e
params_file = os.path.join(share_dir, 'kobuki_bumper2pc', 'config', 'kobuki_bumper2pc_params.yaml')

obs: mesmo assim nao resolveu e vi q ia ter q mudar muito mais coisas e resolvi aguardar pra falar com orientador

// ros2 run kobuki_bumper2pc kobuki_bumper2pc_node (opção que funcionou)
*Converte eventos de sensores do robô Kobuki (bumpers(colisão) e sensores de cliff(tombo)) em uma nuvem de pontos (PointCloud2) e publica no tópico </pointcloud> , assim, ele não mede diretamente
a distância de objetos (como um LiDAR faria), mas sim avisa quando o robô já encostou em algo ou está perto de cair. Esse aviso pode interromper a movimentação do robô quando ele encostar em algo(exemplo).
obs1: <ros2 topic echo /sensors/core> da pra ver os bumpers e cliffs sendo alterados com o impacto ao robo 





